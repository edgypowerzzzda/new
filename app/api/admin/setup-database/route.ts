import { NextResponse } from "next/server"
import { safeSQL, isDatabaseConnected } from "@/lib/db"
import { hashPassword } from "@/lib/auth"

export async function POST() {
  try {
    console.log("üîß Starting complete database setup...")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (!isDatabaseConnected()) {
      console.error("‚ùå Database not connected")
      return NextResponse.json(
        {
          error: "Database not connected. Please check DATABASE_URL environment variable.",
        },
        { status: 500 },
      )
    }

    console.log("‚úÖ Database connection confirmed")

    // 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    console.log("üìã Creating tables...")

    await safeSQL`
      CREATE TABLE IF NOT EXISTS brands (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL UNIQUE,
        description TEXT,
        logo_url VARCHAR(500),
        website VARCHAR(255),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    await safeSQL`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) NOT NULL UNIQUE,
        password_hash VARCHAR(255) NOT NULL,
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        phone VARCHAR(20),
        address TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    await safeSQL`
      CREATE TABLE IF NOT EXISTS administrators (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) NOT NULL UNIQUE,
        password_hash VARCHAR(255) NOT NULL,
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        role VARCHAR(50) DEFAULT 'admin',
        permissions TEXT[],
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    await safeSQL`
      CREATE TABLE IF NOT EXISTS categories (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        slug VARCHAR(255) NOT NULL UNIQUE,
        parent_id INTEGER REFERENCES categories(id),
        description TEXT,
        image_url VARCHAR(500),
        sort_order INTEGER DEFAULT 0,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    await safeSQL`
      CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        slug VARCHAR(255) NOT NULL UNIQUE,
        description TEXT,
        short_description TEXT,
        price DECIMAL(10,2) NOT NULL,
        old_price DECIMAL(10,2),
        sku VARCHAR(100) UNIQUE,
        stock_quantity INTEGER DEFAULT 0,
        brand_id INTEGER REFERENCES brands(id),
        category_id INTEGER REFERENCES categories(id),
        specifications JSONB,
        is_featured BOOLEAN DEFAULT false,
        is_new BOOLEAN DEFAULT false,
        is_recommended BOOLEAN DEFAULT false,
        is_active BOOLEAN DEFAULT true,
        meta_title VARCHAR(255),
        meta_description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    await safeSQL`
      CREATE TABLE IF NOT EXISTS product_images (
        id SERIAL PRIMARY KEY,
        product_id INTEGER REFERENCES products(id) ON DELETE CASCADE,
        image_url VARCHAR(500) NOT NULL,
        alt_text VARCHAR(255),
        sort_order INTEGER DEFAULT 0,
        is_primary BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    await safeSQL`
      CREATE TABLE IF NOT EXISTS favorites (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        product_id INTEGER REFERENCES products(id) ON DELETE CASCADE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, product_id)
      )
    `

    await safeSQL`
      CREATE TABLE IF NOT EXISTS cart_items (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        product_id INTEGER REFERENCES products(id) ON DELETE CASCADE,
        quantity INTEGER NOT NULL DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, product_id)
      )
    `

    console.log("‚úÖ Tables created successfully")

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log("üå± Seeding initial data...")

    await safeSQL`
      INSERT INTO brands (name, description, website) VALUES
      ('Yamaha', '–Ø–ø–æ–Ω—Å–∫–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', 'https://yamaha.com'),
      ('Shure', '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ –∞—É–¥–∏–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏', 'https://shure.com'),
      ('Casio', '–Ø–ø–æ–Ω—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', 'https://casio.com'),
      ('Korg', '–Ø–ø–æ–Ω—Å–∫–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', 'https://korg.com'),
      ('Fender', '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –≥–∏—Ç–∞—Ä –∏ —É—Å–∏–ª–∏—Ç–µ–ª–µ–π', 'https://fender.com'),
      ('Gibson', '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –≥–∏—Ç–∞—Ä', 'https://gibson.com')
      ON CONFLICT (name) DO NOTHING
    `

    await safeSQL`
      INSERT INTO categories (name, slug, parent_id, description) VALUES
      ('–ì–∏—Ç–∞—Ä—ã', 'guitars', NULL, '–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä—ã'),
      ('–ö–ª–∞–≤–∏—à–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', 'keyboards', NULL, '–ü–∏–∞–Ω–∏–Ω–æ, —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã, MIDI-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã'),
      ('–£–¥–∞—Ä–Ω—ã–µ', 'drums', NULL, '–ë–∞—Ä–∞–±–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø–µ—Ä–∫—É—Å—Å–∏—è'),
      ('–ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã', 'microphones', NULL, '–°—Ç—É–¥–∏–π–Ω—ã–µ –∏ –∫–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã'),
      ('DJ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'dj-equipment', NULL, '–ú–∏–∫—à–µ—Ä—ã, –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª–∏, –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã'),
      ('–ö–æ–º–º—É—Ç–∞—Ü–∏—è', 'cables-connectors', NULL, '–ö–∞–±–µ–ª–∏, —Ä–∞–∑—ä–µ–º—ã, –∞–¥–∞–ø—Ç–µ—Ä—ã')
      ON CONFLICT (slug) DO NOTHING
    `

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const guitarsCategoryResult = await safeSQL`SELECT id FROM categories WHERE slug = 'guitars'`
    if (guitarsCategoryResult && guitarsCategoryResult.length > 0) {
      const guitarsId = guitarsCategoryResult[0].id
      await safeSQL`
        INSERT INTO categories (name, slug, parent_id, description) VALUES
        ('–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–µ –≥–∏—Ç–∞—Ä—ã', 'acoustic-guitars', ${guitarsId}, '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∏ —ç—Å—Ç—Ä–∞–¥–Ω—ã–µ –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–µ –≥–∏—Ç–∞—Ä—ã'),
        ('–≠–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä—ã', 'electric-guitars', ${guitarsId}, '–≠–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤'),
        ('–£—Å–∏–ª–∏—Ç–µ–ª–∏ –¥–ª—è –≥–∏—Ç–∞—Ä—ã', 'guitar-amplifiers', ${guitarsId}, '–õ–∞–º–ø–æ–≤—ã–µ –∏ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä–Ω—ã–µ —É—Å–∏–ª–∏—Ç–µ–ª–∏')
        ON CONFLICT (slug) DO NOTHING
      `
    }

    console.log("‚úÖ Categories seeded successfully")

    // 3. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    console.log("üë®‚Äçüíº Creating admin user...")

    const adminPassword = await hashPassword("admin123")
    const userPassword = await hashPassword("user123")

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
    await safeSQL`DELETE FROM administrators WHERE email = 'admin@musicstore.com'`
    await safeSQL`DELETE FROM users WHERE email = 'user@test.com'`

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminResult = await safeSQL`
      INSERT INTO administrators (email, password_hash, first_name, last_name, role, permissions)
      VALUES ('admin@musicstore.com', ${adminPassword}, '–ê–¥–º–∏–Ω', '–°–∏—Å—Ç–µ–º—ã', 'admin', ARRAY['all'])
      RETURNING id, email
    `

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await safeSQL`
      INSERT INTO users (email, password_hash, first_name, last_name)
      VALUES ('user@test.com', ${userPassword}, '–¢–µ—Å—Ç', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
      RETURNING id, email
    `

    console.log("‚úÖ Users created successfully")

    // 4. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
    console.log("üõçÔ∏è Adding sample products...")

    const yamahaResult = await safeSQL`SELECT id FROM brands WHERE name = 'Yamaha'`
    const fenderResult = await safeSQL`SELECT id FROM brands WHERE name = 'Fender'`
    const shureResult = await safeSQL`SELECT id FROM brands WHERE name = 'Shure'`
    const casioResult = await safeSQL`SELECT id FROM brands WHERE name = 'Casio'`

    const acousticResult = await safeSQL`SELECT id FROM categories WHERE slug = 'acoustic-guitars'`
    const electricResult = await safeSQL`SELECT id FROM categories WHERE slug = 'electric-guitars'`
    const microphonesResult = await safeSQL`SELECT id FROM categories WHERE slug = 'microphones'`
    const keyboardsResult = await safeSQL`SELECT id FROM categories WHERE slug = 'keyboards'`

    if (yamahaResult?.length > 0 && acousticResult?.length > 0) {
      await safeSQL`
        INSERT INTO products (name, slug, description, price, brand_id, category_id, sku, stock_quantity, is_featured, is_new) VALUES
        (
          'Yamaha FG830 –ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞',
          'yamaha-fg830-acoustic-guitar',
          '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞ —Å –≤–µ—Ä—Ö–Ω–µ–π –¥–µ–∫–æ–π –∏–∑ –º–∞—Å—Å–∏–≤–∞ –µ–ª–∏ –∏ –∫–æ—Ä–ø—É—Å–æ–º –∏–∑ —Ä–æ–∑–æ–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞',
          25000.00,
          ${yamahaResult[0].id},
          ${acousticResult[0].id},
          'YAM-FG830',
          15,
          true,
          false
        )
        ON CONFLICT (slug) DO NOTHING
      `
    }

    if (fenderResult?.length > 0 && electricResult?.length > 0) {
      await safeSQL`
        INSERT INTO products (name, slug, description, price, brand_id, category_id, sku, stock_quantity, is_featured, is_new) VALUES
        (
          'Fender Player Stratocaster',
          'fender-player-stratocaster',
          '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä–∞ —Å —Ç—Ä–µ–º—è –∑–≤—É–∫–æ—Å–Ω–∏–º–∞—Ç–µ–ª—è–º–∏ –∏ –∫–ª–µ–Ω–æ–≤—ã–º –≥—Ä–∏—Ñ–æ–º',
          65000.00,
          ${fenderResult[0].id},
          ${electricResult[0].id},
          'FEN-PLSTR',
          8,
          true,
          true
        )
        ON CONFLICT (slug) DO NOTHING
      `
    }

    if (shureResult?.length > 0 && microphonesResult?.length > 0) {
      await safeSQL`
        INSERT INTO products (name, slug, description, price, brand_id, category_id, sku, stock_quantity, is_featured, is_new) VALUES
        (
          'Shure SM58 –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∏–∫—Ä–æ—Ñ–æ–Ω',
          'shure-sm58-dynamic-microphone',
          '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–æ–∫–∞–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –∂–∏–≤—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π',
          12000.00,
          ${shureResult[0].id},
          ${microphonesResult[0].id},
          'SHU-SM58',
          25,
          false,
          false
        )
        ON CONFLICT (slug) DO NOTHING
      `
    }

    if (casioResult?.length > 0 && keyboardsResult?.length > 0) {
      await safeSQL`
        INSERT INTO products (name, slug, description, price, brand_id, category_id, sku, stock_quantity, is_featured, is_new) VALUES
        (
          'Casio CT-X700 –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä',
          'casio-ctx700-synthesizer',
          '–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä —Å 61 –∫–ª–∞–≤–∏—à–µ–π –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∑–≤—É–∫–æ–≤',
          18000.00,
          ${casioResult[0].id},
          ${keyboardsResult[0].id},
          'CAS-CTX700',
          12,
          false,
          true
        )
        ON CONFLICT (slug) DO NOTHING
      `
    }

    console.log("‚úÖ Sample products added successfully")

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const finalCheck = await safeSQL`
      SELECT 
        (SELECT COUNT(*) FROM brands) as brands_count,
        (SELECT COUNT(*) FROM categories) as categories_count,
        (SELECT COUNT(*) FROM products) as products_count,
        (SELECT COUNT(*) FROM administrators) as admins_count,
        (SELECT COUNT(*) FROM users) as users_count
    `

    const stats = finalCheck[0]

    console.log("üéâ Database setup completed successfully!")
    console.log("üìä Final stats:", stats)

    return NextResponse.json({
      success: true,
      message: "Database setup completed successfully",
      stats: {
        brands: Number.parseInt(stats.brands_count),
        categories: Number.parseInt(stats.categories_count),
        products: Number.parseInt(stats.products_count),
        admins: Number.parseInt(stats.admins_count),
        users: Number.parseInt(stats.users_count),
      },
      credentials: {
        admin: {
          email: "admin@musicstore.com",
          password: "admin123",
        },
        user: {
          email: "user@test.com",
          password: "user123",
        },
      },
    })
  } catch (error) {
    console.error("üí• Database setup failed:", error)
    return NextResponse.json(
      {
        error: "Database setup failed",
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 },
    )
  }
}
